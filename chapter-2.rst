第2章：简介
===========

本章将对C++进行一个整体介绍。本文档是由Frank编写，作为格罗宁根大学的教学课程。本文当并不是C++参考手册，并未涵盖C语言相关背景知识。可以参考其他的教程（例如the Dutch book De programmeertaal C, Brokken and Kubat, University of Groningen, 1996）或 `在线电子书 <http://publications.gbdirect.co.uk/c_book/>`_ 。

阅读本文档之前，您应该熟悉C语言编程。C++注解接着C语言继续深入，例如指针，基本流程控制和函数构造。

本文当并未涵盖一些基本的语法元素，因为这些符号（例如，用<:代表[，用>:代表]）在C++代码中基本不会出现。此外，三字母符号（用??<代表{，用??>代表}）在C++17标准里已经移除。

C++注解的版本号（当前是10.8.1）随着内容的更新而更新。第一个数字是主版本号，在之后的时间内基本不会发生变化，代表重写。中间的数字随着新的信息加入到本文档而增加。最后一个数字代表小改动，例如改正一些拼写错误。

本文档由格罗宁根大学信息中心基于 `GNU General Public License <http://www.gnu.org/licenses/>`_ 发布。

C++注解采用 `Yodl <https://fbb-git.github.io/yodl/>`_ 格式化系统。

对于本文当的所有的建议，改进和变更，请直接联系该作者：

    | Frank B. Brokken
    | Center of Information Technology,
    | University of Groningen
    | Nettelbosje 1,
    | P.O. Box 11044,
    | 9700 CA Groningen
    | The Netherlands
    | (email: f.b.brokken@rug.nl) 

本章主要是C++提供的特性的概览。包括一些一些对C的拓展，基于对象和面向对象的概念。

2.1：C++注解新增内容
--------------------

当第一个或第二个版本号发生变化时（偶尔也包括第三个版本号变化时），会修改此节的内容。主版本号升级，前一个版本保留，旧版本的入口被移除。

* 10.8.0版增加了一个新的章节（ `2.5.14`_ ），主要介绍C++17标准中引入的新特性，修正许多拼写错误和不确切的表述。同时，在C++17中移除的binders，negators和random_shuffle也被移除( coverage of (obsolete) binders, negators and random_shuffle, removed by the C++17 standard, was discontinued)。

* 10.7.2版对 `11.6 <chapter-11.rst#overloadding>`_ 节中重载和添加类的二元操作符部分进行了重写。

* 10.7.0版添加了关于C++17新标准的的相关章节（ `2.5.14`_ ）。此外，关于重载二元操作符和添加二元操作符到已有类的章节被重写

* 10.6.0版新加了一节（左值，右值等）介绍一些除了我们所熟知左值和右值之外的其他术语；添加了新的一节（标准异常：用还是不用），关于标准异常和非标准异常的区别；介绍如何使用new Type[size]()初始化一个已经分配龄的值/POD对象数组；the section about explicit conversion operators received an overhaul. 

* 10.5.0版包含一部分特定时间相关的工具。包括std::localtime，std::gmtime和std::put_time（ `20.1.5 <chapter-20.rst#time>`_ ），和put_time所能识别的说明符的完整表格。

* 10.4.0版添加之前丢失的关于引用绑定（ `11.6.1 <chapter-11.rst#refbind>`_ ）的章节。该节是11.6的子章节，涵盖重载二元操作符，和之后的一节，关于静态多态（ `22.12 <chapter-22.rst#staticpoly>`_ ）的一节完全重写。此外，C++注解的html版本的外观可以通过向cplusplus.css添加CSS元素进行调整。

* 10.3.0版包含几个关于表达式模板的章节，关于tributes，关于共享互斥锁，关于共享锁，关于各种查找，关于固定大小的存储单元分配函数，和关于移动和交换流；重新组织lambda表达式章节；添加额外的C++14标准引用。

* 10.2.0包含stl正则表达式类的重写，介绍std::placeholder命名空间和通用绑定器。由于C++11是当时的标准，明确提到它已被移除。C++14中提到的被保留，添加龄一些关于C++17标准的注释。

* 10.1.0版添加了关于C++11中正则表达式的处理，描述正则表达式处理的内容重容器一章中移动到标准模板库一章中。

* 10.0.0版添加关于多线程的一章，这是被C++11标准正式支持的。此外，添加了一些次要话题（如std::distance，一些新的语法元素）到C++注解。

2.2：C++历史
------------

C++的第一版实现是1980年左右在贝尔实验室，Unix操作系统诞生的地方。

C++原来是一个预编译器，类似于C语言中的预处理器，将代码中的特殊结构转换为纯C代码。然后由标准C编译器编译该代码。由C++预处理器读取的“预代码”通常以.cc，.C或.cpp作为文件扩展名。然后该文件被转换为以.c为扩展名的C代码，然后进行编译和链接。

C++源码文件的命名方式沿用下来：.cc和.cpp仍然在使用。然而，C++预处理器的工作现在基本上都是在真正的编译过程中处理了。通常编译器根据扩展名判断源码文件所使用的编写语言。Borland和Microsoft C++编译器假定C++源文件以.cpp为扩展名。Gnu g++编译器假定C++源文件以.cc为扩展名。

从过去把C++代码转换成C代码进行编译可以看出，C++是C的超集：C++提供完整的C语法，支持所有的C库函数，并且添加了独有的特性。这使得从C转换到C++相当容易。C程序员可以先从把源文件扩展名由.c改为.cc或.cpp开始C++编程，然后逐渐使用C++所提供的各种特性。不会有很大习惯上的改变。

2.2.1：C++注解的历史
````````````````````

C++注解的原始版本由Frank Brokken和Karel Kubat用荷兰语采用LaTex编写。一段时间后，1994年，karel用英语进行了重写，并转换到更合适的格式。

该教程的第一个版本在1994年10月首次在网上出现。然后，就被转换为SGML格式。

新章节不断的添加进来，内容不断的更新和完善（感谢无数给我发送他们评论的读者）。

在第四个主板本，Frank添加新的章节，并将该文档由SGML转换到yodl。

    C++注解可以自由分发。请确定阅读 `法律声明 <legal.rst>`_ 。

    **继续阅读本文当的后续部分，代表你已知晓并且同意该声明。**

如果你喜欢本文档，分享给你的朋友。更好的是，请给 `Frank <mailto:f.b.brokken@rug.nl)>`_ 发送电子邮件，让我们也知道。

2.2.2：用C++编译器编译C程序
```````````````````````````

潜在的C++程序员应该意识到C++并不是C的完美超集。当你重命名一个.c文件到.cc文件，并由C++编译器进行编译时，你可能会遇到一些不同的地方：

* 在C语言中，sizeof('c')和sizeof(int)相等，'c'可以使任意的ASCII字符。这里面的哲学可能是因为，当字符作为参数传递给函数是，是作为证书传递的。此外，C编译器处理像'c'这样的字符常量，是作为证书常量处理的。因此，在C中，这个函数调用

  ::

    putchar(10);

  和

  ::

    putchar('\n');

  是相同的。

  相比之下，在C++中，sizeof('c')总是1（但也得参考 `3.4.2 <chapter-3.rst#wchar>`_ ）。int总是int。后面我们将会看到，下面这两个函数调用

  ::

    somefunc(10);

  和

  ::

    somefunc('\n');

  可能会不同的函数处理：C++区别两个函数不仅仅判断它们的名字，也比较它们的参数类型。这两个函数中，参数就不一样，前者是整形参数，后者是字符型参数。

* C++需要非常严格的外部函数原型定义。例如，在C语言中，原型定义可能像这样

  ::

    void func();

  意为一个func()函数存在，没有返回值。函数声明没有指定可以接收什么类型的参数。

  然而，在C++中，上面的声明意味着该函数根本不接收任何参数。给它传递任何参数都会导致编译错误。

  注意，在声明函数的时候，extern关键字不是必要的。一个函数定义变为一个函数声明，只需要把函数体部分用分号代替即可。但是，在声明外部变量的时候，exterm关键字是必要的。

2.2.3：编译C++程序
``````````````````

要编译C++程序，得需要一个编译器。考虑到本文档是免费特性，自然不会感到吃惊，在这里会推荐一个免费编译器。http://www.gnu.org 的Free Software Foundation（FSF）已经提供了一个C++编译器，在其他的地方也可获取到，它也是Debian（ http://www.debian.org ） linux（ http://www.linux.org ）发行版中的一部分。

要使用C++14标准所提供的特性，需要提供--std=c++14的标识。在C++注解中，在编译示例代码时，总是假定使用了这个标识。要使用C++17标准中的特性，可以使用Gnu g++-6编译器。要使用C++17标准，要提供--std=c++1z标识。

2.2.3.1：MS-Windows下的C++
##########################




_`2.5.14`
`````````


